import { ITableProps } from '../';
import { Column, EditableCell } from '../models';
import { ValidationFunc } from '../types';
export declare const getValidatedEditableCells: ({ data, editableCells, columns, rowKeyField, validation }: {
    data?: any[];
    editableCells?: EditableCell[];
    columns: Column[];
    rowKeyField: string;
    validation?: ValidationFunc;
}) => EditableCell[];
export declare const getEditableCellsByData: (data: any[], rowKeyField: string, columns: Column[]) => EditableCell[];
export declare const addColumnsToRowEditableCells: (editableCells: EditableCell[], columns: Column[], rowKeyValue: any) => EditableCell[];
export declare const removeDataKeysFromSelectedRows: (selectedRows: any[], data: any[], rowKeyField: string) => any[];
export declare const getUpdatedFocused: (props: ITableProps, action: any, funcToUpdate: any) => ITableProps<any> | {
    focused: {
        cell: any;
    };
    columnReordering?: boolean;
    columnResizing?: boolean;
    columns: Column<any>[];
    controlledPropsKeys?: import("../types").ControlledPropsKeys;
    data?: any[];
    detailsRows?: any[];
    editableCells?: EditableCell[];
    editingMode?: import("../enums").EditingMode;
    extendedFilter?: (data: any[]) => any[];
    extendedSort?: (data: any[], columns: Column[]) => any[];
    filter?: import("../types").FilterFunc<any>;
    filteringMode?: import("../enums").FilteringMode;
    format?: import("../types").FormatFunc<any>;
    groupedColumns?: import("../Models/GroupedColumn").GroupedColumn[];
    groupPanel?: import("../Models/GroupPanelSettings").GroupPanelSettings;
    groups?: import("../models").Group[];
    groupsExpanded?: any[][];
    height?: number | string;
    loading?: import("../props").ILoadingProps;
    noData?: import("../types").NoData;
    oddEvenRows?: boolean;
    paging?: import("../models").PagingOptions;
    rowKeyField: string;
    rowReordering?: boolean;
    search?: import("../types").SearchFunc<any>;
    searchText?: string;
    selectedRows?: any[];
    singleAction?: any;
    sort?: import("../types").SortFunc;
    sortingMode?: import("../enums").SortingMode;
    treeExpandButtonColumnKey?: string;
    treeGroupKeyField?: string;
    treeGroupsExpanded?: any[];
    validation?: ValidationFunc<any>;
    virtualScrolling?: import("../models").VirtualScrolling;
    width?: number | string;
};
